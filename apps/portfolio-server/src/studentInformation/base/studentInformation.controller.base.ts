/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentInformationService } from "../studentInformation.service";
import { StudentInformationCreateInput } from "./StudentInformationCreateInput";
import { StudentInformation } from "./StudentInformation";
import { StudentInformationFindManyArgs } from "./StudentInformationFindManyArgs";
import { StudentInformationWhereUniqueInput } from "./StudentInformationWhereUniqueInput";
import { StudentInformationUpdateInput } from "./StudentInformationUpdateInput";

export class StudentInformationControllerBase {
  constructor(protected readonly service: StudentInformationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentInformation })
  async createStudentInformation(
    @common.Body() data: StudentInformationCreateInput
  ): Promise<StudentInformation> {
    return await this.service.createStudentInformation({
      data: data,
      select: {
        course: true,
        createdAt: true,
        email: true,
        enrollmentNumber: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentInformation] })
  @ApiNestedQuery(StudentInformationFindManyArgs)
  async studentInformations(
    @common.Req() request: Request
  ): Promise<StudentInformation[]> {
    const args = plainToClass(StudentInformationFindManyArgs, request.query);
    return this.service.studentInformations({
      ...args,
      select: {
        course: true,
        createdAt: true,
        email: true,
        enrollmentNumber: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentInformation(
    @common.Param() params: StudentInformationWhereUniqueInput
  ): Promise<StudentInformation | null> {
    const result = await this.service.studentInformation({
      where: params,
      select: {
        course: true,
        createdAt: true,
        email: true,
        enrollmentNumber: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentInformation(
    @common.Param() params: StudentInformationWhereUniqueInput,
    @common.Body() data: StudentInformationUpdateInput
  ): Promise<StudentInformation | null> {
    try {
      return await this.service.updateStudentInformation({
        where: params,
        data: data,
        select: {
          course: true,
          createdAt: true,
          email: true,
          enrollmentNumber: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentInformation(
    @common.Param() params: StudentInformationWhereUniqueInput
  ): Promise<StudentInformation | null> {
    try {
      return await this.service.deleteStudentInformation({
        where: params,
        select: {
          course: true,
          createdAt: true,
          email: true,
          enrollmentNumber: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
