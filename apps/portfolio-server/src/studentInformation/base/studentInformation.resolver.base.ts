/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentInformation } from "./StudentInformation";
import { StudentInformationCountArgs } from "./StudentInformationCountArgs";
import { StudentInformationFindManyArgs } from "./StudentInformationFindManyArgs";
import { StudentInformationFindUniqueArgs } from "./StudentInformationFindUniqueArgs";
import { CreateStudentInformationArgs } from "./CreateStudentInformationArgs";
import { UpdateStudentInformationArgs } from "./UpdateStudentInformationArgs";
import { DeleteStudentInformationArgs } from "./DeleteStudentInformationArgs";
import { StudentInformationService } from "../studentInformation.service";
@graphql.Resolver(() => StudentInformation)
export class StudentInformationResolverBase {
  constructor(protected readonly service: StudentInformationService) {}

  async _studentInformationsMeta(
    @graphql.Args() args: StudentInformationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentInformation])
  async studentInformations(
    @graphql.Args() args: StudentInformationFindManyArgs
  ): Promise<StudentInformation[]> {
    return this.service.studentInformations(args);
  }

  @graphql.Query(() => StudentInformation, { nullable: true })
  async studentInformation(
    @graphql.Args() args: StudentInformationFindUniqueArgs
  ): Promise<StudentInformation | null> {
    const result = await this.service.studentInformation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentInformation)
  async createStudentInformation(
    @graphql.Args() args: CreateStudentInformationArgs
  ): Promise<StudentInformation> {
    return await this.service.createStudentInformation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StudentInformation)
  async updateStudentInformation(
    @graphql.Args() args: UpdateStudentInformationArgs
  ): Promise<StudentInformation | null> {
    try {
      return await this.service.updateStudentInformation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentInformation)
  async deleteStudentInformation(
    @graphql.Args() args: DeleteStudentInformationArgs
  ): Promise<StudentInformation | null> {
    try {
      return await this.service.deleteStudentInformation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
